---
# Verify core functionality of metrics collection system
#
# Facts set by this task:
# - metrics_verify_failed: boolean indicating if any verification check failed
# - metrics_test_results: formatted string containing full test results and system status
#
# Required vars:
# - verify_test_print
#
- name: Verify metrics system components
  block:
    # ...............................................................................
    # Basic service checks
    - name: Check service statuses
      ansible.builtin.service_facts:

    - name: Verify InfluxDB service status
      ansible.builtin.assert:
        that:
          - "'influxdb.service' in ansible_facts.services"
          - "ansible_facts.services['influxdb.service'].state == 'running'"
          - "ansible_facts.services['influxdb.service'].status == 'enabled'"
        fail_msg: "InfluxDB service is not running properly"
      register: influxdb_service_check
      ignore_errors: true

    - name: Verify Telegraf service status
      ansible.builtin.assert:
        that:
          - "'telegraf.service' in ansible_facts.services"
          - "ansible_facts.services['telegraf.service'].state == 'running'"
          - "ansible_facts.services['telegraf.service'].status == 'enabled'"
        fail_msg: "Telegraf service is not running properly"
      register: telegraf_service_check
      ignore_errors: true

    # ...............................................................................
    # Network connectivity checks
    - name: Verify InfluxDB port is listening
      ansible.builtin.wait_for:
        port: 8086
        timeout: 30
        state: started
      register: port_check
      ignore_errors: true

    - name: Verify Telegraf connection to InfluxDB
      ansible.builtin.shell: "ss -tunp | grep ':8086.*telegraf'"
      register: connection_check
      changed_when: false
      failed_when: false

    # ...............................................................................
    # Configuration and bucket checks
    - name: Verify bucket exists and is accessible
      ansible.builtin.command: influx bucket list --name telegraf --json
      register: bucket_check
      changed_when: false
      failed_when: bucket_check.rc != 0

    - name: Parse bucket information
      ansible.builtin.set_fact:
        bucket_info_parsed: "{{ bucket_check.stdout | from_json }}"
      when: bucket_check is success

    # ...............................................................................
    # API Health checks
    - name: Check InfluxDB API health
      ansible.builtin.uri:
        url: "http://localhost:8086/health"
        method: GET
        status_code: 200
      register: health_check
      failed_when: health_check.json.status != "pass"
      ignore_errors: true

    - name: Verify API ping
      ansible.builtin.uri:
        url: "http://localhost:8086/ping"
        method: GET
        status_code: 204
      register: ping_check
      ignore_errors: true

    # ...............................................................................
    # Data write and query tests
    - name: Test write capability
      ansible.builtin.command: >
        influx write --bucket telegraf --precision s 
        "test,tag=molecule value=1"
      register: write_check
      changed_when: false
      failed_when: write_check.rc != 0
      ignore_errors: true

    - name: Test query capability
      ansible.builtin.command: >
        influx query 'from(bucket:"telegraf")
        |> range(start: -1m)
        |> filter(fn: (r) => r["_measurement"] == "test")'
      register: query_check
      changed_when: false
      failed_when: query_check.rc != 0
      ignore_errors: true

    # ...............................................................................
    - name: Check recent logs for errors
      ansible.builtin.shell: |
        journalctl -u {{ item }} --since "5 minutes ago" -p err
      register: error_logs
      changed_when: false
      failed_when: false
      loop: "{{ monitoring_capabilities[capability].service_names }}"

    # ...............................................................................
    - name: Get service versions
      block:
        - name: Get InfluxDB version
          command: influx version
          register: influx_version
          changed_when: false

        - name: Get Telegraf version
          command: telegraf --version
          register: telegraf_version
          changed_when: false

    # ######################################################################
    # Reporting section
    #   - set facts
    #   - print log, if  verify_test_print: true
    #   - log fact to ES, if verify_es_log: true
    #   - Add notice to mattermost, if verify_mm_log: true
    # ......................................................................
    #
    - name: Set metrics test results fact
      no_log: "{{ molecule_nolog | default(true) }}"
      ansible.builtin.set_fact:
        metrics_test_results: |
          === Monitor Stack Integration Test Results ===
          Timestamp: {{ verify_timestamp }}

          Service Versions:
          - InfluxDB: {{ influx_version.stdout }}
          - Telegraf: {{ telegraf_version.stdout }}

          Service Status:
          - InfluxDB: {{ ansible_facts.services['influxdb.service'].state }}
          - Telegraf: {{ ansible_facts.services['telegraf.service'].state }}

          InfluxDB Status:
          - Version: {{ influx_version.stdout }}
          - Health Check: {{ health_check.json.status | default('failed') }}
          - API Status: {{ ping_check.status | default(0) == 204 }}
          - Write Test: {{ write_check.rc | default(1) == 0 }}
          - Query Test: {{ query_check.rc | default(1) == 0 }}
          {% if bucket_info_parsed is defined %}
          - Bucket Configuration:
              Name: {{ bucket_info_parsed[0].name }}
              ID: {{ bucket_info_parsed[0].id }}
              Retention: {{ bucket_info_parsed[0].retentionPeriod | default('infinite') }}
              Organization ID: {{ bucket_info_parsed[0].orgID }}
          {% endif %}

          Telegraf Integration:
          - Connection Status: {{ 'Established' if not connection_check.failed else 'Not Connected' }}
          - Network Connections:
          {{ connection_check.stdout_lines | default([]) | to_nice_yaml | indent(8) }}

          Recent Log Activity:
          {% set real_errors = [] %}
          {% for result in error_logs.results %}
            {% if result.stdout != "-- No entries --" %}
              {% set _ = real_errors.append(result) %}
            {% endif %}
          {% endfor %}
          {% if real_errors %}
          !!! ERRORS DETECTED IN LOGS !!!
          Error Entries:
          {% for error in real_errors %}
          Service: {{ error.item }}
          {{ error.stdout_lines | to_nice_yaml | indent(8) }}
          {% endfor %}
          {% else %}
          âœ“ No errors found in logs for services:
          {% for result in error_logs.results %}
            - {{ result.item }}
          {% endfor %}
          {% endif %}

    # .........................................................................................................
    # Add to all_verify_results using task name as key
    - name: Add metrics results to dictionary
      set_fact:
        all_verify_results: "{{ all_verify_results | combine({'metrics-shared': metrics_test_results}) }}"

    # Create output directory
    - name: Create local data directory for test results
      become: false
      ansible.builtin.file:
        path: "{{ report_root }}/{{ ansible_distribution | lower }}"
        state: directory
        mode: "0755"
      delegate_to: localhost

    # Save test results
    - name: Save integration test results
      become: false
      ansible.builtin.copy:
        content: "{{ metrics_test_results }}"
        dest: "{{ report_root }}/{{ ansible_distribution | lower }}/metrics-collection-{{ ansible_date_time.epoch }}-1.yml"
        mode: "0644"
      delegate_to: localhost

    # Set verification status
    - name: Set verification status
      set_fact:
        metrics_verify_failed: >-
          {{ 
            (port_check.failed | default(false)) or 
            (influxdb_service_check.failed | default(false)) or 
            (telegraf_service_check.failed | default(false)) or
            (health_check.failed | default(false)) or
            (write_check.failed | default(false)) or
            (query_check.failed | default(false))
          }}

    # Add to all_verify_results using task name as key
    - name: Add metrics failed results to dictionary
      set_fact:
        all_verify_failed: "{{ all_verify_failed | combine({'metrics': metrics_verify_failed}) }}"

    # Save verification results
    - name: Record metrics verification failed status
      when: metrics_verify_failed | bool
      become: false
      delegate_to: localhost
      ansible.builtin.copy:
        content: |
          verify_result: {{ 'failed' if metrics_verify_failed else 'passed' }}
          failed_checks:
            influxdb_service: {{ influxdb_service_check | to_json }}
            telegraf_service: {{ telegraf_service_check | to_json }}
            port: {{ port_check | to_json }}
            health: {{ health_check | to_json }}
            write: {{ write_check | to_json }}
            query: {{ query_check | to_json }}
          error_logs:
            {{ error_logs.results | to_nice_yaml | indent(2) }}
          capability: metrics
          distribution: {{ ansible_distribution | lower }}
          timestamp: {{ verify_timestamp }}
        dest: "{{ report_root }}/{{ ansible_distribution | lower }}/verify-metrics-status-{{ ansible_date_time.epoch }}-1.yml"
        mode: "0644"

  rescue:
    - name: Record verification failure
      set_fact:
        metrics_verify_failed: true

    - name: Log verification failure details
      delegate_to: localhost
      ansible.builtin.copy:
        content: |
          verify_result: failed
          error: Unexpected failure during verification process
          timestamp: {{ verify_timestamp }}
          distribution: {{ ansible_distribution | lower }}
        dest: "{{ report_root }}/{{ ansible_distribution | lower }}/verify-metrics-failure-{{ ansible_date_time.epoch }}-1.yml"
        mode: "0644"
