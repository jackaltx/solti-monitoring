---
###################################################################################
#
#  Install Block
#

- name: Install Loki Package
  when: loki_state == 'present'
  become: true
  block:
    - name: Is loki running?
      ansible.builtin.include_tasks:
        file: "../../shared/any/tasks/is-service-running.yml"
      vars:
        service_name: loki.service

    # .....................................................................................
    # only install if not running or loki_force_reload
    - name: Loki package install
      ansible.builtin.include_tasks:
        file: "../../shared/grafana/tasks/{{ ansible_distribution }}-install.yml"
      vars:
        package: ["loki", "logcli"]
      when: service_running is false or loki_force_reload

    ##################
    # Configure

    - debug:
        var: loki_local_storage

    - name: Template config to  /etc/loki/config.yml
      ansible.builtin.template:
        src: config.yml.j2
        dest: /etc/loki/config.yml
        owner: root
        group: root
        mode: "0644"
      notify:
        - Restart loki

    # ........................................................................
    # this handles where an issue where the package maintainer did not create
    # a proper loki group for the user.
    - name: Ensure loki group and user exist
      become: true
      block:
        - name: Check if loki group exists
          ansible.builtin.getent:
            database: group
            key: loki
          register: loki_group
          failed_when: false

        - name: Create loki group
          ansible.builtin.group:
            name: loki
            system: yes
            state: present
          when: loki_group.failed is defined or loki_group.rc != 0

        - name: Modify the loki user, which was created by pkg install
          ansible.builtin.user:
            name: loki
            group: loki
            system: yes
            state: present

  # ........................................................................
- name: Prepare Loki directories
  become: true
  block:
    - name: Create Loki directories with consistent permissions
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: loki
        group: loki
        mode: "0770"
        modification_time: preserve
        access_time: preserve
      loop:
        - /tmp/loki
        # - /tmp/loki/tsdb-shipper-active
        # - /tmp/loki/tsdb-shipper-active/scratch
        - /var/lib/loki
        - /var/lib/loki/chunks
        - /var/lib/loki/rules
      register: loki_dirs

    - name: Debug directory changes
      ansible.builtin.debug:
        var: loki_dirs
        verbosity: 1

    - name: Ensure consistent SELinux context
      ansible.builtin.command: restorecon -Rv "{{ item }}"
      loop:
        - /tmp/loki
        - /var/lib/loki
      when:
        - ansible_selinux.status == 'enabled'
        - loki_dirs.changed

###################################################################################
#
#  Remove Block
#
- name: Remove Loki Service
  when: loki_state == 'absent'
  become: true
  block:
    # .................................................................
    - name: Package remove
      ansible.builtin.include_tasks:
        file: "../../shared/any/tasks/{{ ansible_distribution }}-rm.yml"
      vars:
        package: loki
        service_name: loki.service

    # .................................................................
    - name: "Remove the config files /etc/loki"
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/loki
        - /etc/default/loki
      when: loki_delete_config

      # .................................................................
    - name: "Remove the date files /var/lib/loki/"
      ansible.builtin.file:
        path: "/var/lib/loki/*"
        state: absent
      when: loki_delete_data
