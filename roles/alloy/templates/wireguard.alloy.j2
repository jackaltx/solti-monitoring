// =======================================================================================
// =======================================================================================
// WireGuard VPN monitoring configuration for Alloy

// =======================================================================================
// Journal relabeling rules specifically for WireGuard
loki.relabel "wireguard_journal" {
  forward_to = []
  
  // Keep logs from kernel that mention WireGuard
  rule {
    source_labels = ["__journal_syslog_identifier"]
    regex = "kernel"
    action = "keep"
  }
  
  rule {
    source_labels = ["__journal__message"]
    regex = ".*wireguard.*"
    action = "keep"
  }
  
  // Add basic labels
  rule {
    target_label = "job"
    replacement = "wireguard"
  }
  
  rule {
    target_label = "label"
    replacement = "vpn"
  }
  
  rule {
    source_labels = ["__journal__hostname"]
    target_label = "host"
  }
}

// =======================================================================================
// Process pipeline for WireGuard logs from journal
loki.process "wireguard_journal_logs" {
  forward_to = [{{ alloy_loki_endpoints | map(attribute='label') | map('regex_replace', '^(.*)$', 'loki.write.\\1.receiver') | join(', ') }}]
  
  // Extract interface name
  stage.regex {
    expression = "wireguard: (?P<interface>\\w+): (?P<event_message>.*)"
  }
  
  stage.labels {
    values = {
      interface = null,
    }
  }
  
  // Connection events - handshake initiation (connection attempt)
  stage.match {
    selector = "{event_message=~\"Receiving handshake initiation\"}"
    stage.regex {
      expression = "Receiving handshake initiation from peer (?P<peer_id>\\d+) \\((?P<peer_ip>[^:]+):(?P<peer_port>\\d+)\\)"
    }
    
    stage.labels {
      values = {
        event_type = "connection_attempt",
        connection_state = "handshake_received",
        peer_id = null,
        peer_ip = null,
        peer_port = null,
      }
    }
  }
  
  // Connection events - handshake response (connection establishment)
  stage.match {
    selector = "{event_message=~\"Sending handshake response\"}"
    stage.regex {
      expression = "Sending handshake response to peer (?P<peer_id>\\d+) \\((?P<peer_ip>[^:]+):(?P<peer_port>\\d+)\\)"
    }
    
    stage.labels {
      values = {
        event_type = "connection_attempt",
        connection_state = "handshake_sent",
        peer_id = null,
        peer_ip = null,
        peer_port = null,
      }
    }
  }
  
  // Keepalive messages (connection maintenance)
  stage.match {
    selector = "{event_message=~\"Receiving keepalive\"}"
    stage.regex {
      expression = "Receiving keepalive packet from peer (?P<peer_id>\\d+) \\((?P<peer_ip>[^:]+):(?P<peer_port>\\d+)\\)"
    }
    
    stage.labels {
      values = {
        event_type = "connection_maintenance",
        connection_state = "active",
        peer_id = null,
        peer_ip = null,
        peer_port = null,
      }
    }
  }
  
  // Keypair events (connection established successfully)
  stage.match {
    selector = "{event_message=~\"Keypair.*created\"}"
    stage.regex {
      expression = "Keypair (?P<keypair_id>\\d+) created for peer (?P<peer_id>\\d+)"
    }
    
    stage.labels {
      values = {
        event_type = "connection_established",
        connection_state = "connected",
        peer_id = null,
        keypair_id = null,
      }
    }
  }
  
  // Keypair destruction (possible disconnection)
  stage.match {
    selector = "{event_message=~\"Keypair.*destroyed\"}"
    stage.regex {
      expression = "Keypair (?P<keypair_id>\\d+) destroyed for peer (?P<peer_id>\\d+)"
    }
    
    stage.labels {
      values = {
        event_type = "connection_closing",
        connection_state = "key_destroyed",
        peer_id = null,
        keypair_id = null,
      }
    }
  }
  
  // Invalid MAC errors (failed connection attempts)
  stage.match {
    selector = "{event_message=~\"Invalid MAC of handshake\"}"
    stage.regex {
      expression = "Invalid MAC of handshake, dropping packet from (?P<peer_ip>[^:]+):(?P<peer_port>\\d+)"
    }
    
    stage.labels {
      values = {
        event_type = "connection_error",
        connection_state = "invalid_handshake",
        peer_ip = null,
        peer_port = null,
      }
    }
  }
  
  // Other errors
  stage.match {
    selector = "{event_message=~\"error|invalid|failed\"}"
    stage.labels {
      values = {
        event_type = "connection_error",
      }
    }
  }
  
  // Peer specific tracking
  stage.match {
    selector = "{peer_id=\"16\"}"
    stage.labels {
      values = {
        peer_name = "mobile-user-1",
      }
    }
  }
  
  stage.match {
    selector = "{peer_id=\"18\"}"
    stage.labels {
      values = {
        peer_name = "mobile-user-2",
      }
    }
  }
  
  stage.match {
    selector = "{peer_id=\"19\"}"
    stage.labels {
      values = {
        peer_name = "remote-office",
      }
    }
  }
}

// =======================================================================================
// Journal source for WireGuard
loki.source.journal "wireguard_journal" {
  relabel_rules = loki.relabel.wireguard_journal.rules
  forward_to = [loki.process.wireguard_journal_logs.receiver]
  max_age = "12h"
  path = "/var/log/journal"
  labels = {component = "loki.source.journal.wireguard"}
}

// =======================================================================================
// Keep the file source as well for compatibility/redundancy
// Define file match pattern for WireGuard logs via kernel.log
local.file_match "wireguard_syslog" {
  path_targets = [{
    __address__ = "localhost",
    __path__    = "/var/log/kern.log",
    host        = "{{ ansible_hostname }}",
    job         = "wireguard",
    label       = "vpn",
  }]
}

// Process pipeline for WireGuard logs from file
loki.process "wireguard_file_logs" {
  forward_to = [{{ alloy_loki_endpoints | map(attribute='label') | map('regex_replace', '^(.*)$', 'loki.write.\\1.receiver') | join(', ') }}]

  // Basic syslog format parsing
  stage.regex {
    expression = "^(?P<timestamp>\\w+\\s+\\d+\\s+\\d+:\\d+:\\d+) (?P<hostname>\\S+) (?P<program>[^\\[]+)(?:\\[(?P<pid>\\d+)\\])?: (?P<message>.*)$"
  }
  
  stage.timestamp {
    source = "timestamp"
    format = "Jan _2 15:04:05"
  }
  
  // Only keep WireGuard logs
  stage.match {
    selector = "{message=~\"wireguard:\"}"
    stage.labels {
      values = {
        component = "wireguard",
      }
    }
  }
  
  // Forward to the same processing pipeline as journal logs
  // This ensures consistent labeling regardless of source
  stage.match {
    selector = "{component=\"wireguard\"}"
    stage.regex {
      expression = "wireguard: (?P<interface>\\w+): (?P<event_message>.*)"
    }
  }
  
  // Use the same event type classification as the journal processor
  // Connection events - handshake initiation
  stage.match {
    selector = "{event_message=~\"Receiving handshake initiation\"}"
    stage.regex {
      expression = "Receiving handshake initiation from peer (?P<peer_id>\\d+) \\((?P<peer_ip>[^:]+):(?P<peer_port>\\d+)\\)"
    }
    
    stage.labels {
      values = {
        event_type = "connection_attempt",
        connection_state = "handshake_received",
        peer_id = null,
        peer_ip = null,
        peer_port = null,
      }
    }
  }
  
  // Same pattern for other event types as in journal processor
  // ... [reuse the same matching rules as in the journal processor]
  // Connection events - handshake response
  stage.match {
    selector = "{event_message=~\"Sending handshake response\"}"
    stage.regex {
      expression = "Sending handshake response to peer (?P<peer_id>\\d+) \\((?P<peer_ip>[^:]+):(?P<peer_port>\\d+)\\)"
    }
    
    stage.labels {
      values = {
        event_type = "connection_attempt",
        connection_state = "handshake_sent",
        peer_id = null,
        peer_ip = null,
        peer_port = null,
      }
    }
  }
  
  // Keepalive messages
  stage.match {
    selector = "{event_message=~\"Receiving keepalive\"}"
    stage.regex {
      expression = "Receiving keepalive packet from peer (?P<peer_id>\\d+) \\((?P<peer_ip>[^:]+):(?P<peer_port>\\d+)\\)"
    }
    
    stage.labels {
      values = {
        event_type = "connection_maintenance",
        connection_state = "active",
        peer_id = null,
        peer_ip = null,
        peer_port = null,
      }
    }
  }
  
  // Keypair events
  stage.match {
    selector = "{event_message=~\"Keypair.*created\"}"
    stage.regex {
      expression = "Keypair (?P<keypair_id>\\d+) created for peer (?P<peer_id>\\d+)"
    }
    
    stage.labels {
      values = {
        event_type = "connection_established",
        connection_state = "connected",
        peer_id = null,
        keypair_id = null,
      }
    }
  }
  
  // Keypair destruction
  stage.match {
    selector = "{event_message=~\"Keypair.*destroyed\"}"
    stage.regex {
      expression = "Keypair (?P<keypair_id>\\d+) destroyed for peer (?P<peer_id>\\d+)"
    }
    
    stage.labels {
      values = {
        event_type = "connection_closing",
        connection_state = "key_destroyed",
        peer_id = null,
        keypair_id = null,
      }
    }
  }
  
  // Invalid MAC errors
  stage.match {
    selector = "{event_message=~\"Invalid MAC of handshake\"}"
    stage.regex {
      expression = "Invalid MAC of handshake, dropping packet from (?P<peer_ip>[^:]+):(?P<peer_port>\\d+)"
    }
    
    stage.labels {
      values = {
        event_type = "connection_error",
        connection_state = "invalid_handshake",
        peer_ip = null,
        peer_port = null,
      }
    }
  }
  
  // Peer specific tracking - same as journal processor
  stage.match {
    selector = "{peer_id=\"16\"}"
    stage.labels {
      values = {
        peer_name = "mobile-user-1",
      }
    }
  }
  
  stage.match {
    selector = "{peer_id=\"18\"}"
    stage.labels {
      values = {
        peer_name = "mobile-user-2",
      }
    }
  }
  
  stage.match {
    selector = "{peer_id=\"19\"}"
    stage.labels {
      values = {
        peer_name = "remote-office",
      }
    }
  }
}

// Source definition for WireGuard logs from file
loki.source.file "wireguard_file_source" {
  targets               = local.file_match.wireguard_syslog.targets
  forward_to            = [loki.process.wireguard_file_logs.receiver]
  legacy_positions_file = "/tmp/positions.yaml"
}

