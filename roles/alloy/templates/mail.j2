// =======================================================================================
// Postfix and Dovecot logs collection configuration for Alloy
// Updated to use journald with priority filtering and authentication event capture

// =======================================================================================
// Journal relabeling rules for mail services
loki.relabel "mail_journal" {
  forward_to = []
  
  // Keep only logs from mail-related services
  rule {
    source_labels = ["__journal__systemd_unit"]
    regex = "(postfix(@-)?|dovecot|mail)\\.service"
    action = "keep"
  }

  // Add source debugging information
  rule {
    source_labels = ["__journal__systemd_unit"]
    target_label = "unit"
  }  

  // Alternative: keep mail-related logs by identifier
  // Per Claude: The rule is complementary to the unit-based rule. 
  //  Together, they form a more robust filtering approach that can 
  //  handle different mail service configurations.
  //
  //rule {
  //  source_labels = ["__journal_syslog_identifier"]
  //  regex = "(postfix(@-)?|dovecot|master|smtp|submission|smtpd|cleanup|qmgr|bounce|lmtp|imap|pop3)"
  //  action = "keep"
  //}
  
  // Filter by priority - keep warning and above
  rule {
    source_labels = ["__journal_priority"]
    regex = "[0-4]"  // 0-4 are emergency(0), alert(1), critical(2), error(3), warning(4)
    action = "keep"
  }
  
  // Add basic labels
  rule {
    target_label = "job"
    replacement = "mail"
  }
  
  rule {
    source_labels = ["__journal_syslog_identifier"]
    target_label = "service"
  }
  
  rule {
    source_labels = ["__journal__hostname"]
    target_label = "host"
  }
  
  rule {
    source_labels = ["__journal_priority_keyword"]
    target_label = "priority"
  }
}

// Process mail journal logs
loki.process "mail_journal_logs" {
  forward_to = [{{ alloy_loki_endpoints | map(attribute='label') | map('regex_replace', '^(.*)$', 'loki.write.\\1.receiver') | join(', ') }}]
  
  // Identify mail service type
  stage.match {
    selector = "{service=~\"postfix.*\"}"
    stage.labels {
      values = {
        mail_service = "postfix",
      }
    }
  }
  
  stage.match {
    selector = "{service=~\"dovecot.*\"}"
    stage.labels {
      values = {
        mail_service = "dovecot",
      }
    }
  }
  
  // =======================================================================================
  // Special case to keep authentication events, even if info priority
  stage.match {
    selector = "{priority=\"info\", message=~\"[Aa]uth|[Ll]ogin|[Aa]uthentication|session\"}"
    stage.labels {
      values = {
        event_type = "authentication",
        keep = "true",
      }
    }
  }
  
  // Drop regular info messages
  stage.match {
    selector = "{priority=\"info\", keep!=\"true\"}"
    action = "drop"
  }
  
  // =======================================================================================
  // Postfix-specific log parsing
  
  // Extract SMTP transaction details
  stage.match {
    selector = "{mail_service=\"postfix\", message=~\"status=\"}"
    stage.regex {
      expression = "(?P<client_info>[^,]*), status=(?P<status>\\S+)"
    }
  }
  
  // Track delivery statuses
  stage.match {
    selector = "{status=\"sent\"}"
    stage.labels {
      values = {
        delivery_result = "success",
      }
    }
  }
  
  stage.match {
    selector = "{status=\"bounced\"}"
    stage.labels {
      values = {
        delivery_result = "bounce",
      }
    }
  }
  
  stage.match {
    selector = "{status=\"deferred\"}"
    stage.labels {
      values = {
        delivery_result = "deferred",
      }
    }
  }
  
  stage.match {
    selector = "{status=\"rejected\"}"
    stage.labels {
      values = {
        delivery_result = "rejected",
      }
    }
  }
  
  // SMTP authentication events
  stage.match {
    selector = "{mail_service=\"postfix\", message=~\"sasl_method\"}"
    stage.regex {
      expression = "sasl_method=(?P<auth_method>\\S+), sasl_username=(?P<auth_user>\\S+)"
    }
    
    stage.labels {
      values = {
        event_type = "smtp_auth",
      }
    }
  }
  
  // Extract email sender/recipient
  stage.match {
    selector = "{mail_service=\"postfix\", message=~\"from=<\"}"
    stage.regex {
      expression = "from=<(?P<sender>[^>]*)>"
    }
  }
  
  stage.match {
    selector = "{mail_service=\"postfix\", message=~\"to=<\"}"
    stage.regex {
      expression = "to=<(?P<recipient>[^>]*)>"
    }
    
    stage.labels {
      values = {
        event_type = "mail_delivery",
      }
    }
  }
  
  // Identify message size
  stage.match {
    selector = "{mail_service=\"postfix\", message=~\"size=\"}"
    stage.regex {
      expression = "size=(?P<message_size>\\d+)"
    }
  }
  
  // SPAM/virus filter results
  stage.match {
    selector = "{mail_service=\"postfix\", message=~\"SPAM\"}"
    stage.labels {
      values = {
        spam_detected = "true",
      }
    }
  }
  
  stage.match {
    selector = "{mail_service=\"postfix\", message=~\"VIRUS|INFECTED\"}"
    stage.labels {
      values = {
        virus_detected = "true",
      }
    }
  }
  
  // =======================================================================================
  // Dovecot-specific log parsing
  
  // IMAP/POP3 logins
  stage.match {
    selector = "{mail_service=\"dovecot\", message=~\"Login:\"}"
    stage.regex {
      expression = "Login: user=<(?P<login_user>[^>]*)>"
    }
    
    stage.labels {
      values = {
        event_type = "mail_login",
      }
    }
  }
  
  // Failed logins
  stage.match {
    selector = "{mail_service=\"dovecot\", message=~\"auth failed\"}"
    stage.labels {
      values = {
        event_type = "mail_auth_failure",
      }
    }
  }
  
  // Mailbox operations
  stage.match {
    selector = "{mail_service=\"dovecot\", message=~\"[Mm]ailbox\"}"
    stage.labels {
      values = {
        event_type = "mailbox_operation",
      }
    }
  }
  
  // Disconnections
  stage.match {
    selector = "{mail_service=\"dovecot\", message=~\"Disconnected\"}"
    stage.labels {
      values = {
        event_type = "mail_disconnect",
      }
    }
  }
  
  // Security events
  stage.match {
    selector = "{message=~\"blacklist|blocked\", mail_service=\"postfix\"}"
    stage.labels {
      values = {
        security_event = "blocked_sender",
      }
    }
  }
  
  // Track TLS connections
  stage.match {
    selector = "{message=~\"TLS connection\"}"
    stage.labels {
      values = {
        tls_connection = "true",
      }
    }
  }
  
  // Clean up labels to reduce cardinality
  stage.label_drop {
    values = ["pid", "keep"]
  }
}

// =======================================================================================
// Source mail logs from journal
loki.source.journal "mail_journal" {
  relabel_rules = loki.relabel.mail_journal.rules
  forward_to = [loki.process.mail_journal_logs.receiver]
  max_age = "12h"
  labels = {component = "loki.source.journal.mail"}
}

