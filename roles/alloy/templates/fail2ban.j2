// =======================================================================================
// =======================================================================================
// Fail2ban logs collection configuration for Alloy

// =======================================================================================
// Define file match pattern for fail2ban
local.file_match "fail2ban" {
  path_targets = [{
    __address__ = "localhost",
    __path__    = "/var/log/fail2ban.log",
    host        = "{{ ansible_hostname }}",
    job         = "fail2ban",
    label       = "security",
  }]
}

// =======================================================================================
// Process pipeline for fail2ban logs
loki.process "fail2ban" {
  forward_to    =  [{{ alloy_loki_endpoints | map(attribute='label') | map('regex_replace', '^(.*)$', 'loki.write.\\1.receiver') | join(', ') }}]


  // Handle multi-line log entries
  stage.multiline {
    firstline     = "\\d{4}-\\d{2}-\\d{2}"
    max_lines     = 10
    max_wait_time = "1s"
  }

  // Basic fail2ban log parsing
  stage.regex {
    expression = "^(?P<timestamp>\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2},\\d{3}) fail2ban\\.(?P<component>[^\\[]+)\\s*\\[(?P<pid>\\d+)\\]: (?P<severity>\\w+)\\s+\\[(?P<jail>[^\\]]+)\\]\\s+(?P<full_message>.*)$"
  }

  stage.timestamp {
    source = "timestamp"
    format = "2006-01-02 15:04:05.000"
  }
  
  // Extract action_type and IP in one go
  stage.regex {
    source = "full_message"
    expression = "(?P<action_type>Ban|Unban|Found|Ignore)\\s+(?P<source_ip>[\\da-fA-F.:]+)"
  }

  // Pulls labels from the RE2 queries
  stage.labels {
    values = {
      component = "",
      jail = "",
      action_type = "",
      source_ip = "",
      severity = "",
   }
  }

  // Match on Found actions (Working... needs spaces)
  stage.match {
    selector = "{ action_type = \"Found\" }"
    action = "drop"
  }

  // ....................................................
  // Testing label introduction


  stage.match {
    selector = "{ action_type = \"Ban\" }"
    stage.static_labels {
      values = { 
        retain_ip = "true",
      }
    }
  }

  // .........................................................
  // Then later drop it conditionally  , jail = \"recidive\"
  stage.match {
    selector = "{ retain_ip != \"true\" }"
    stage.label_drop {
      values = ["source_ip"]
    }
  }

}

// =======================================================================================
// Source definition to read the fail2ban log file
loki.source.file "fail2ban" {
  targets               = local.file_match.fail2ban.targets
  forward_to            = [loki.process.fail2ban.receiver]
  legacy_positions_file = "/tmp/positions.yaml"
}

