// =======================================================================================
// =======================================================================================
// Fail2ban logs collection configuration for Alloy

// =======================================================================================
// Define file match pattern for fail2ban
local.file_match "fail2ban" {
  path_targets = [{
    __address__ = "localhost",
    __path__    = "/var/log/fail2ban.log",
    host        = "{{ ansible_hostname }}",
    job         = "fail2ban",
    label       = "security",
  }]
}

// =======================================================================================
// Process pipeline for fail2ban logs
loki.process "fail2ban" {
  forward_to    =  [{{ alloy_loki_endpoints | map(attribute='label') | map('regex_replace', '^(.*)$', 'loki.write.\\1.receiver') | join(', ') }}]


  // Add debug marker
  stage.labels {
    values = {
      debug_enabled = "true",
    }
  }

  // Handle multi-line log entries
  stage.multiline {
    firstline     = "\\d{4}-\\d{2}-\\d{2}"
    max_lines     = 10
    max_wait_time = "1s"
  }

  // Basic fail2ban log parsing - simplified to ensure matching
  stage.regex {
    expression = "^(?P<timestamp>\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2},\\d{3}) fail2ban\\.(?P<component>[^\\[]+)\\s*\\[(?P<pid>\\d+)\\]: (?P<priority>\\w+)\\s+\\[(?P<jail>[^\\]]+)\\]\\s+(?P<message>.*)$"
  }

  stage.timestamp {
    source = "timestamp"
    format = "2006-01-02 15:04:05.000"
  }
  
  stage.labels {
    values = {
      component = null,
      priority  = null,
      jail      = null,
      message   = null,
      extracted_message = "yes",  // Add this debug label
    }
  }

  // ===================================================================
  // Extract action and IP address for Ban/Unban events


  // Handle Ban events
  stage.match {
    selector = "{message=~\"^Ban \"}"

    stage.labels {
      values = {
        debug_stage = "ban_selector_matched",
      }
    }

    stage.regex {
      expression = "^Ban\\s+(?P<source_ip>[\\da-fA-F.:]+)"
    }
    stage.labels {
      values = {
        f2b_notice = "ban",
        source_ip = null,
      }
    }
  }


  // ......................................... <<<<
  // Handle Unban events
  stage.match {
    selector = "{message=~\"^Unban \"}"
    stage.labels {
      values = {
        debug_stage = "unban_selector_matched",
      }
    }
    stage.regex {
      expression = "^Unban\\s+(?P<source_ip>[\\da-fA-F.:]+)"
    }
    stage.labels {
      values = {
        f2b_notice = "unban",
        source_ip=null,
        }
    }
  }

  // ===================================================================    
  // Starting/stopping jails
  stage.match {
    selector = "{message=~\"^(Starting|Stopping|Started|Stopped)\"}"
    stage.labels {
      values = {
        f2b_action = "lifecycle",
        action_type = "jail_lifecycle",
      }
    }
  }
  
  // Priority-based severity mapping
  stage.match {
    selector = "{priority=\"CRITICAL\"}"
    stage.labels {
      values = {
        severity = "critical",
      }
    }
  }
    
  stage.match {
    selector = "{priority=\"ERROR\"}"
    stage.labels {
      values = {
        severity = "error",
      }
    }
  }
  
  stage.match {
    selector = "{priority=\"WARNING\"}"
    stage.labels {
      values = {
        severity = "warning",
      }
    }
  }
  
  stage.match {
    selector = "{priority=\"NOTICE\"}"
    stage.labels {
      values = {
        severity = "notice",
      }
    }
  }
  
  stage.match {
    selector = "{priority=\"INFO\"}"
    stage.labels {
      values = {
        severity = "info",
      }
    }
  }
  
  // Special handling for recidive jail (repeat offenders)
  stage.match {
    selector = "{jail=\"recidive\"}"
    stage.labels {
      values = {
        repeat_offender = "true",
      }
    }
  }
  
  // Drop some noisy info-level messages
  stage.match {
    selector = "{severity=\"info\", message=~\"Roll over\"}"
    action   = "drop"
  }
}

// =======================================================================================
// Source definition to read the fail2ban log file
loki.source.file "fail2ban" {
  targets               = local.file_match.fail2ban.targets
  forward_to            = [loki.process.fail2ban.receiver]
  legacy_positions_file = "/tmp/positions.yaml"
}

