// =======================================================================================
// =======================================================================================
// Fail2ban logs collection configuration for Alloy

// =======================================================================================
// Define file match pattern for fail2ban
local.file_match "fail2ban" {
  path_targets = [{
    __address__ = "localhost",
    __path__    = "/var/log/fail2ban.log",
    host        = "{{ ansible_hostname }}",
    job         = "fail2ban",
    label       = "security",
  }]
}

// =======================================================================================
// Process pipeline for fail2ban logs
loki.process "fail2ban" {
  forward_to    =  [{{ alloy_loki_endpoints | map(attribute='label') | map('regex_replace', '^(.*)$', 'loki.write.\\1.receiver') | join(', ') }}]

  // Handle multi-line log entries
  stage.multiline {
    firstline     = "\\d{4}-\\d{2}-\\d{2}"
    max_lines     = 10
    max_wait_time = "1s"
  }

  // Basic fail2ban log parsing - updated to capture jail directly from log format
  stage.regex {
    expression = "^(?P<timestamp>\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2},\\d{3}) fail2ban\\.(?P<component>\\S+)\\s+\\[(?P<pid>\\d+)\\]: (?P<priority>\\S+)\\s+\\[(?P<jail>\\S+)\\] (?P<message>.*)$"
  }
  
  stage.timestamp {
    source = "timestamp"
    format = "2006-01-02 15:04:05.000"
  }
  
  stage.labels {
    values = {
      component = null,
      priority  = null,
      jail      = null,
    }
  }
  
  // Extract IP addresses from messages
  stage.match {
    selector = "{message=~\"Found|Ban|Unban\"}"
    stage.regex {
      expression = "(?:Found|Ban|Unban) (?P<source_ip>[\\da-fA-F.:]+)( - \\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2})?"
    }
  }
  
  // Ignore patterns
  stage.match {
    selector = "{message=~\"Ignore\"}"
    stage.labels {
      values = {
        action = "ignore",
      }
    }
    
    stage.regex {
      expression = "Ignore (?P<ignored_ip>[\\da-fA-F.:]+)"
    }
  }
  
  // Categorize Ban events
  stage.match {
    selector = "{message=~\"^Ban \"}"
    stage.labels {
      values = {
        action = "ban",
        action_type = "ip_action",
      }
    }
  }
  
  // Categorize Unban events
  stage.match {
    selector = "{message=~\"^Unban \"}"
    stage.labels {
      values = {
        action = "unban",
        action_type = "ip_action",
      }
    }
  }
  
  // Found/detection events
  stage.match {
    selector = "{message=~\"^Found \"}"
    stage.labels {
      values = {
        action = "detect",
        action_type = "detection",
      }
    }
  }
  
  // Starting/stopping jails
  stage.match {
    selector = "{message=~\"^(Starting|Stopping|Started|Stopped)\"}"
    stage.labels {
      values = {
        action = "lifecycle",
        action_type = "jail_lifecycle",
      }
    }
  }
  
  // Priority-based severity mapping
  stage.match {
    selector = "{priority=\"CRITICAL\"}"
    stage.labels {
      values = {
        severity = "critical",
      }
    }
  }
  
  stage.match {
    selector = "{priority=\"ERROR\"}"
    stage.labels {
      values = {
        severity = "error",
      }
    }
  }
  
  stage.match {
    selector = "{priority=\"WARNING\"}"
    stage.labels {
      values = {
        severity = "warning",
      }
    }
  }
  
  stage.match {
    selector = "{priority=\"NOTICE\"}"
    stage.labels {
      values = {
        severity = "notice",
      }
    }
  }
  
  stage.match {
    selector = "{priority=\"INFO\"}"
    stage.labels {
      values = {
        severity = "info",
      }
    }
  }
  
  // Special handling for recidive jail (repeat offenders)
  stage.match {
    selector = "{jail=\"recidive\"}"
    stage.labels {
      values = {
        repeat_offender = "true",
      }
    }
  }
  
  // Drop some noisy info-level messages
  stage.match {
    selector = "{severity=\"info\", message=~\"Roll over\"}"
    action   = "drop"
  }
}

// =======================================================================================
// Source definition to read the fail2ban log file
loki.source.file "fail2ban" {
  targets               = local.file_match.fail2ban.targets
  forward_to            = [loki.process.fail2ban.receiver]
  legacy_positions_file = "/tmp/positions.yaml"
}