// =======================================================================================
// Postfix and Dovecot logs collection configuration for Alloy
// Using traditional mail.log file instead of journal

// =======================================================================================
// Define file match pattern for mail logs
local.file_match "mail_logs" {
  path_targets = [{
    __address__ = "localhost",
    __path__    = "/var/log/mail.log",
    host        = "{{ ansible_hostname }}",
    job         = "mail",
    label       = "mail",
  }]
}

// =======================================================================================
// Process pipeline for mail logs
loki.process "mail_logs" {
  forward_to    =  [{{ alloy_loki_endpoints | map(attribute='label') | map('regex_replace', '^(.*)$', 'loki.write.\\1.receiver') | join(', ') }}]

  // Basic syslog format parsing - improved to better handle dovecot format
  //stage.regex {
  //  expression = "^(?P<timestamp>\\w+\\s+\\d+\\s+\\d+:\\d+:\\d+)\\s+(?P<hostname>\\S+)\\s+(?P<service_name>[^:]+):\\s+(?P<message>.*)$"
  //}

  // Improved initial regex pattern to extract PID separately
  //stage.regex {
  //  expression = "^(?P<timestamp>\\w+\\s+\\d+\\s+\\d+:\\d+:\\d+)\\s+(?P<hostname>\\S+)\\s+(?P<service_name>[^\\[]+)(\\[(?P<pid>\\d+)\\])?:\\s+(?P<message>.*)$"
  //}

  // Improved initial regex pattern to correctly extract service without trailing colon
  // stage.regex {
  //   expression = "^(?P<timestamp>\\w+\\s+\\d+\\s+\\d+:\\d+:\\d+)\\s+(?P<hostname>\\S+)\\s+(?P<service_name>[^:]+):(?P<message>.*)$"
  // }

  // First, fix the initial regex pattern to properly separate PID
  stage.regex {
    expression = "^(?P<timestamp>\\w+\\s+\\d+\\s+\\d+:\\d+:\\d+)\\s+(?P<hostname>\\S+)\\s+(?P<raw_service>[^:]+):\\s+(?P<message>.*)$"
  }


  stage.timestamp {
    source = "timestamp"
    format = "Jan _2 15:04:05"
  }

  // =======================================================================================
  // Extract common values from regex
  stage.labels {
    values = {
      hostname = null,
      raw_service = null,
      message = null,
    }
  }

  // Then extract service name and PID separately
  stage.regex {
    source = "raw_service"
    expression = "^(?P<service_name>[^\\[]+)(?:\\[(?P<pid>\\d+)\\])?"
  }

  // Set the extracted service name and pid as labels
  stage.labels {
    values = {
      service_name = null,
      pid = null,
    }
  }

  // Extract clean service name without trailing spaces
  stage.regex {
    source = "service_name"
    expression = "^\\s*(?P<service>[^\\s]+)"
  }

  stage.labels {
    values = {
      service = null,
    }
  }

  // =======================================================================================
  // Identify mail service type
  stage.match {
    selector = "{service=~\"postfix.*\"}"
    stage.labels {
      values = {
        mail_service = "postfix",
      }
    }
  }
  
  stage.match {
    selector = "{service=~\"dovecot.*\"}"
    stage.labels {
      values = {
        mail_service = "dovecot",
      }
    }
  }
  
  // =======================================================================================
  // Process Dovecot logs with improved parsing
  
  // Handle dovecot disconnection events
  stage.match {
    selector = "{mail_service=\"dovecot\", message=~\"Disconnected.*\"}"
    stage.regex {
      expression = "Disconnected \\((?P<disconnect_reason>[^\\)]+)\\): user=<(?P<disconnect_user>[^>]*)>, rip=(?P<remote_ip>[^,]+), lip=(?P<local_ip>[^,]+)(?:, (?P<security_info>.*))?, session=<(?P<session_id>[^>]+)>"
    }
    
    stage.labels {
      values = {
        event_type = "mail_disconnect",
        disconnect_reason = null,
        disconnect_user = null,
        remote_ip = null,
        local_ip = null,
        session_id = null,
      }
    }
  }

  // Extract Dovecot service component properly
  stage.match {
    selector = "{mail_service=\"dovecot\"}"
    stage.regex {
      source = "service_name"
      expression = "dovecot: (?P<dovecot_service>[^:]+)"
    }
    
    stage.labels {
      values = {
        dovecot_service = null,
      }
    }
  }

  // ...............................................................
  // Handle dovecot user session logs with embedded user data
  stage.match {
    selector = "{mail_service=\"dovecot\", service_name=~\"dovecot: imap.*\"}"
    
    // Extract user info from service name
    stage.regex {
      source = "service_name"
      expression = "dovecot: imap\\((?P<login_user>[^@]+)@(?P<domain>[^\\)]+)\\)"
    }
    
    stage.labels {
      values = {
        dovecot_service = "imap",
        login_user = null,
        domain = null,
      }
    }
    
    // Just tag the event type for logout events
    stage.match {
      selector = "{message=~\"Logged out.*\"}"
      stage.static_labels {
        values = {
          event_type = "mail_logout",
        }
      }
    }
  }


  // ...............................................................
  // Login events - adjusted to match the actual message format
  stage.match {
    selector = "{dovecot_service=~\"imap-login|pop3-login\", service_name=~\".*Login\", message=~\"user=<.*\"}"
    stage.regex {
      expression = "user=<(?P<login_user>[^>]*)>, method=(?P<auth_method>\\w+), rip=(?P<remote_ip>[^,]+), lip=(?P<local_ip>[^,]+)(?:, mpid=(?P<master_pid>\\d+))(?:, (?P<security_info>[^,]+))?, session=<(?P<session_id>[^>]+)>"
    }
    
    stage.labels {
      values = {
        event_type = "mail_login",
        event_subtype = "success",
        login_user = null,
        auth_method = null,
        remote_ip = "",
        local_ip = "",
        security_info = null,
        session_id = null,
      }
    }
  } 
  

  // ====================================================================================================================
  // Filter for drop section

  // Filter out local testing connections
  stage.match {
    selector = "{remote_ip=\"::1\", local_ip=\"::1\", message=~\".*no auth attempts.*\"}"
    action   = "drop"
  }

  // Filter out local testing connections from dovecot
  stage.match {
    selector = "{mail_service=\"dovecot\", remote_ip=\"::1\", local_ip=\"::1\"}"
    action   = "drop"
  }


  // ....
  // Drop dovecot imap login local connections
  stage.match {
    selector = "{service=\"dovecot\", service_name=~\".*imap-login: Disconnected.*\", message=~\".*rip=::1, lip=::1.*\"}"
    action = "drop"
  }

  // Drop dovecot pop3 login local connections
  stage.match {
    selector = "{service=\"dovecot\", service_name=~\".*pop3-login: Disconnected.*\", message=~\".*rip=::1, lip=::1.*\"}"
    action = "drop"
  }

  // Drop postfix smtpd localhost connections - use simpler pattern
  stage.match {
    selector = "{service=\"postfix/smtpd\", message=~\".*localhost.*::1.*\"}"
    action = "drop"
  }
 
  // ========================================================================================================
  // failure classification section
  
  // Failed logins
  stage.match {
    selector = "{mail_service=\"dovecot\", message=~\"auth failed.*\"}"
    stage.labels {
      values = {
        event_type = "mail_auth_failure",
        alert_level = "medium",
      }
    }
  }

  // Dovecot LMTP operations
  stage.match {
    selector = "{dovecot_service=\"lmtp\"}"
    
    // Sieve filter actions
    stage.match {
      selector = "{message=~\"sieve:.*\"}"
      stage.regex {
        expression = "sieve: msgid=(?:<)?(?P<msgid>[^>]+)(?:>)?: (?P<sieve_action>stored mail into mailbox|fileinto action: stored mail into mailbox) '(?P<mailbox>[^']+)'"
      }
      
      stage.labels {
        values = {
          event_type = "mail_delivery",
          delivery_method = "lmtp",
          msgid = null,
          sieve_action = null,
          mailbox = null,
        }
      }
    }
    
    // LMTP connections
    stage.match {
      selector = "{message=~\"Connect from.*\"}"
      stage.static_labels {
        values = {
          event_type = "lmtp_connect",
        }
      }
    }
    
    stage.match {
      selector = "{message=~\"Disconnect from.*\"}"
      stage.static_labels {
        values = {
          event_type = "lmtp_disconnect",
        }
      }
    }
  }

  // Dovecot IMAP and POP3 operations
  stage.match {
    selector = "{dovecot_service=~\"imap|pop3\"}"
    
    // Session data tracking
    stage.match {
      selector = "{message=~\"Connection closed.*\"}"
      stage.regex {
        expression = "Connection closed \\((?P<close_reason>[^\\)]+)\\)(?: in=(?P<bytes_in>\\d+) out=(?P<bytes_out>\\d+)(?: deleted=(?P<deleted>\\d+))?(?: expunged=(?P<expunged>\\d+))?(?: trashed=(?P<trashed>\\d+))?(?: hdr_count=(?P<hdr_count>\\d+))?(?: hdr_bytes=(?P<hdr_bytes>\\d+))?(?: body_count=(?P<body_count>\\d+))?(?: body_bytes=(?P<body_bytes>\\d+))?)?.*"
      }
      
      stage.labels {
        values = {
          event_type = "mail_session_end",
          close_reason = null,
          bytes_in = null,
          bytes_out = null,
        }
      }
    }
    
    // Logout tracking
    stage.match {
      selector = "{message=~\"Logged out.*\"}"
      stage.regex {
        expression = "Logged out in=(?P<bytes_in>\\d+) out=(?P<bytes_out>\\d+)(?: deleted=(?P<deleted>\\d+))?(?: expunged=(?P<expunged>\\d+))?(?: trashed=(?P<trashed>\\d+))?(?: hdr_count=(?P<hdr_count>\\d+))?(?: hdr_bytes=(?P<hdr_bytes>\\d+))?(?: body_count=(?P<body_count>\\d+))?(?: body_bytes=(?P<body_bytes>\\d+))?.*"
      }
      
      stage.labels {
        values = {
          event_type = "mail_logout",
          bytes_in = null,
          bytes_out = null,
        }
      }
    }
  }

  // =======================================================================================
  // Extract specific service components for postfix
  stage.match {
    selector = "{service=~\"postfix/smtpd.*\"}"
    stage.static_labels {
      values = {
        service_component = "smtpd",
        protocol = "smtp",
      }
    }
  }
  
  stage.match {
    selector = "{service=~\"postfix/smtps/smtpd.*\"}"
    stage.static_labels {
      values = {
        service_component = "smtpd",
        protocol = "smtps",
      }
    }
  }

  // =======================================================================================
  // Process anvil statistics
  stage.match {
    selector = "{service=~\"postfix/anvil.*\", message=~\"statistics:.*\"}"
    stage.regex {
      expression = "statistics: (?P<stat_type>[^\\s]+) (?P<stat_name>[^\\s]+) (?P<stat_value>[^\\s]+) for \\((?P<protocol>[^:]+):(?P<client_ip>[^\\)]+)\\) at (?P<stat_timestamp>[^\\s]+)"
    }
    
    stage.labels {
      values = {
        event_type = "mail_statistics",
        stat_type = null,
        stat_name = null,
        stat_value = null,
        protocol = null,
        client_ip = null,
      }
    }
  }

  // =======================================================================================
  // Identify spam blocks
  stage.match {
    selector = "{mail_service=\"postfix\", message=~\"NOQUEUE: reject:.*\"}"
    stage.regex {
      expression = "NOQUEUE: reject: RCPT from (?P<reject_host>[^\\[]+)\\[(?P<reject_ip>[^\\]]+)\\]: (?P<reject_code>\\d+) (?P<reject_subcode>[\\d\\.]+) (?P<reject_message>[^;]+); (?P<reject_details>.*)"
    }
    
    stage.labels {
      values = {
        event_type = "mail_rejected",
        alert_level = "low",
        reject_host = null,
        reject_ip = null,
        reject_code = null,
        reject_subcode = null,
        reject_message = null,
        reject_details = null,
      }
    }
    
    // Extract sender and recipient from rejects
    stage.regex {
      source = "reject_details"
      expression = "from=<(?P<reject_sender>[^>]+)> to=<(?P<reject_recipient>[^>]+)> proto=(?P<reject_proto>\\w+)"
    }
    
    stage.labels {
      values = {
        reject_sender = null,
        reject_recipient = null,
        reject_proto = null,
      }
    }
  }

  // Identify specific block reasons
  stage.match {
    selector = "{event_type=\"mail_rejected\", reject_message=~\".*blocked using.*spamhaus.*\"}"
    stage.static_labels {
      values = {
        block_reason = "spamhaus",
        block_category = "rbl",
      }
    }
  }

  // =======================================================================================
  // Identify warnings
  stage.match {
    selector = "{message=~\"warning:.*\"}"

    stage.regex {
      expression = "warning:\\s+(?P<warning_source>[^\\[]+)(\\[(?P<source_ip>[^\\]]+)\\])?:?\\s+(?P<warning_message>.*)"
    }
    
    stage.static_labels {
      values = {
        log_level = "warning",
        //warning_source = null,
        //source_ip = null,
        //warning_message = null,
      }
    }
  }

  // Categorize warning types
  stage.match {
    selector = "{log_level=\"warning\", warning_message=~\".*SASL.*authentication failed.*\"}"

    stage.regex {
      expression = "SASL (?P<auth_method>\\w+) authentication failed:.*sasl_username=(?P<attempted_user>[^\\s,]*)"
    }
    
    stage.static_labels {
      values = {
        warning_type = "auth_failure",
        alert_level = "medium",
        //auth_method = null,
        //attempted_user = null,
      }
    }
  }
  
  // DNS resolution issues
  stage.match {
    selector = "{log_level=\"warning\", warning_message=~\".*does not resolve to address.*\"}"
    stage.regex {
      expression = "hostname (?P<hostname>[^\\s]+) does not resolve to address (?P<ip_address>[^\\s:]+)"
    }
    
    stage.static_labels {
      values = {
        warning_type = "dns_failure",
        alert_level = "low",
        //hostname = null,
        //ip_address = null,
      }
    }
  }
  
  // TLS/SSL issues
  stage.match {
    selector = "{log_level=\"warning\", warning_message=~\"TLS library problem.*\"}"
    stage.regex {
      expression = "TLS library problem: (?P<ssl_error>.*)"
    }
    
    stage.static_labels {
      values = {
        warning_type = "tls_failure",
        //alert_level = "medium",
        //ssl_error = null,
      }
    }
  }

  // =======================================================================================
  // Postfix-specific Attack Patterns
  stage.match {
    selector = "{warning_type=\"auth_failure\", attempted_user=~\"(sales|admin|info|support)(@.*)?\"}"
    stage.static_labels {
      values = {
        attack_pattern = "common_accounts",
      }
    }
  }

  stage.match {
    selector = "{warning_type=\"auth_failure\", attempted_user=~\"[0-9]+(@.*)?\"}"
    stage.static_labels {
      values = {
        attack_pattern = "numeric_accounts",
      }
    }
  }


  // =======================================================================================
  // Extract only the most critical fields for mail flow tracking
  stage.match {
    selector = "{service=\"postfix/qmgr\", message=~\".*: from=<.*>, size=.*\"}"
    stage.regex {
      expression = "(?P<queue_id>[A-F0-9]+): from=<(?P<sender>[^>]*)>, size=(?P<message_size>\\d+)"
    }
    
    stage.static_labels {
      values = {
        event_type = "mail_queued",
      }
    }
    
    stage.labels {
      values = {
        queue_id = null,
        sender = null,
      }
    }
  }



  // Optional: Keep track of source IP for security events but drop for others
  stage.match {
    selector = "{event_type=~\"mail_rejected|mail_auth_failure\"}"
    stage.static_labels {
      values = {
        track_source = "true",
      }
    }
  }

  stage.match {
    selector = "{track_source!=\"true\"}"
    stage.label_drop {
      values = ["source_ip", "remote_ip", "reject_ip"]
    }
  }


  // Clean up labels to reduce cardinality
  stage.label_drop {
    values = ["pid", "drop_candidate","raw_service","service_name","host","track_source"]
  }

}


// =======================================================================================
// Source definition to read the mail log file
loki.source.file "mail_logs" {
  targets               = local.file_match.mail_logs.targets
  forward_to            = [loki.process.mail_logs.receiver]
  legacy_positions_file = "/tmp/positions.yaml"
}

