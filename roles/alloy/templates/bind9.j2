// =======================================================================================
// =======================================================================================
// Bind9 DNS server logs collection configuration for Alloy

// =======================================================================================
// Define file match pattern for Bind9 main logs
local.file_match "bind9_main" {
  path_targets = [{
    __address__ = "localhost",
    __path__    = "/var/log/named/named.log",
    host        = "{{ ansible_hostname }}",
    job         = "bind9",
    label       = "dns",
  }, {
    __address__ = "localhost",
    __path__    = "/var/log/bind/bind.log",
    host        = "{{ ansible_hostname }}",
    job         = "bind9",
    label       = "dns",
  }, {
    __address__ = "localhost",
    __path__    = "/var/log/bind9.log",
    host        = "{{ ansible_hostname }}",
    job         = "bind9",
    label       = "dns",
  }]
}

// Define file match pattern for Bind9 query logs
local.file_match "bind9_queries" {
  path_targets = [{
    __address__ = "localhost",
    __path__    = "/var/log/bind/query.log",
    host        = "{{ ansible_hostname }}",
    job         = "bind9",
    label       = "dns_query",
  }]
}

// =======================================================================================
// Process pipeline for Bind9 logs
loki.process "bind9_main_logs" {
  forward_to    =  [{{ alloy_loki_endpoints | map(attribute='label') | map('regex_replace', '^(.*)$', 'loki.write.\\1.receiver') | join(', ') }}]

  // Basic Bind9 log parsing
  stage.regex {
    expression = "^(?P<timestamp>\\d+-\\w+-\\d+ \\d+:\\d+:\\d+\\.\\d+) (?P<severity>\\w+): (?P<category>\\w+): (?P<message>.*)$"
  }
  
  stage.timestamp {
    source = "timestamp"
    format = "02-Jan-2006 15:04:05.000"
  }
  
  stage.labels {
    values = {
      severity = null,
      category = null,
    }
  }
  
  // Extract common DNS query information - simplified
  stage.match {
    selector = "{message=~\"query\"}"
    stage.labels {
      values = {
        event_type = "query",
      }
    }
  }
  
  // Extract zone transfers - simplified
  stage.match {
    selector = "{message=~\"transfer\"}"
    stage.labels {
      values = {
        event_type = "zone_transfer",
      }
    }
  }
  
  // Detect DNS updates - simplified
  stage.match {
    selector = "{message=~\"update\"}"
    stage.labels {
      values = {
        event_type = "dns_update",
      }
    }
  }
  
  // Detect zone loading
  stage.match {
    selector = "{message=~\"loaded zone\"}"
    stage.labels {
      values = {
        event_type = "zone_load",
      }
    }
  }
  
  // NXDOMAIN responses
  stage.match {
    selector = "{message=~\"NXDOMAIN\"}"
    stage.labels {
      values = {
        dns_response = "nxdomain",
      }
    }
  }
  
  // SERVFAIL responses
  stage.match {
    selector = "{message=~\"SERVFAIL\"}"
    stage.labels {
      values = {
        dns_response = "servfail",
      }
    }
  }
  
  // Security related events - simplified
  stage.match {
    selector = "{message=~\"denied\"}"
    stage.labels {
      values = {
        security_event = "true",
      }
    }
  }
  
  stage.match {
    selector = "{message=~\"refused\"}"
    stage.labels {
      values = {
        security_event = "true",
      }
    }
  }
  
  // Configuration issues - simplified
  stage.match {
    selector = "{message=~\"bad zone\"}"
    stage.labels {
      values = {
        config_issue = "true",
      }
    }
  }
  
  // DNSSEC related events
  stage.match {
    selector = "{message=~\"DNSSEC\"}"
    stage.labels {
      values = {
        dnssec_event = "true",
      }
    }
  }
  
  // Drop some routine log entries to reduce noise
  stage.match {
    selector = "{severity=\"info\", message=~\"success\"}"
    action   = "drop"
  }
}

// =======================================================================================
// Process pipeline for query logs (separate file)
loki.process "bind9_query_logs" {
  forward_to    =  [{{ alloy_loki_endpoints | map(attribute='label') | map('regex_replace', '^(.*)$', 'loki.write.\\1.receiver') | join(', ') }}]
  
  // Query log format - simplified
  stage.regex {
    expression = "^(?P<timestamp>\\d+-\\w+-\\d+ \\d+:\\d+:\\d+\\.\\d+) client (?P<client_ip>[^#]+)#(?P<client_port>\\d+).*: (?P<query_domain>.+)$"
  }
  
  stage.timestamp {
    source = "timestamp"
    format = "02-Jan-2006 15:04:05.000"
  }
  
  stage.labels {
    values = {
      client_ip = null,
      query_domain = null,
    }
  }
  
  // Track common record types - simplified
  stage.match {
    selector = "{query_domain=~\".*IN A .*\"}"
    stage.labels {
      values = {
        query_type = "A",
      }
    }
  }
  
  stage.match {
    selector = "{query_domain=~\".*IN AAAA .*\"}"
    stage.labels {
      values = {
        query_type = "AAAA",
      }
    }
  }
  
  // Track common result types - simplified
  stage.match {
    selector = "{query_domain=~\".*NXDOMAIN.*\"}"
    stage.labels {
      values = {
        result = "nxdomain",
      }
    }
  }
  
  stage.match {
    selector = "{query_domain=~\".*NOERROR.*\"}"
    stage.labels {
      values = {
        result = "success",
      }
    }
  }
  
  // Drop local queries to reduce noise
  stage.match {
    selector = "{client_ip=\"127.0.0.1\"}"
    action = "drop"
  }
  
  // Clean up labels to reduce cardinality
  stage.label_drop {
    values = ["client_port"]
  }
}

// =======================================================================================
// Source definitions to read the Bind9 log files
loki.source.file "bind9_main_source" {
  targets               = local.file_match.bind9_main.targets
  forward_to            = [loki.process.bind9_main_logs.receiver]
  legacy_positions_file = "/tmp/positions.yaml"
}

loki.source.file "bind9_query_source" {
  targets               = local.file_match.bind9_queries.targets
  forward_to            = [loki.process.bind9_query_logs.receiver]
  legacy_positions_file = "/tmp/positions.yaml"
}


