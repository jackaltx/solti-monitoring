// =======================================================================================
// Postfix and Dovecot logs collection configuration for Alloy
// Using traditional mail.log file instead of journal

// =======================================================================================
// Define file match pattern for mail logs
local.file_match "mail_logs" {
  path_targets = [{
    __address__ = "localhost",
    __path__    = "/var/log/mail.log",
    host        = "{{ ansible_hostname }}",
    job         = "mail",
    label       = "mail",
  }]
}

// =======================================================================================
// Process pipeline for mail logs
loki.process "mail_logs" {
  forward_to = [{{ alloy_loki_endpoints | map(attribute='label') | map('regex_replace', '^(.*)$', 'loki.write.\\1.receiver') | join(', ') }}]

  // Basic syslog format parsing
  stage.regex {
    expression = "^(?P<timestamp>\\w+\\s+\\d+\\s+\\d+:\\d+:\\d+)\\s+(?P<hostname>\\S+)\\s+(?P<service>[^\\[]+)(\\[(?P<pid>\\d+)\\])?:\\s+(?P<message>.*)$"
    // trim = true
  }
  
  stage.timestamp {
    source = "timestamp"
    format = "Jan _2 15:04:05"
  }



  // =======================================================================================
  // Pulls labels from the RE2 queries
  stage.labels {
    values = {
      hostname = "",
      service = "",
      pid = "",
      message = "",
   }
  }



  // =======================================================================================
  // Identify mail service type

  // First a high level service match

  stage.match {
    selector = "{service=~\"postfix.*\"}"
    stage.static_labels {
      values = {
        mail_service = "postfix",
      }
    }
  }
  
  stage.match {
    selector = "{service=~\"dovecot.*\"}"
    stage.static_labels {
      values = {
        mail_service = "dovecot",
      }
    }
  }
  
  // Extract specific service components for postfix  

  stage.match {
    selector = "{service=~\"postfix/smtpd.*\"}"
    stage.static_labels {
      values = {
        service_component = "smtpd",
        protocol = "smtp",
      }
    }
  }

  
  stage.match {
    selector = "{service=~\"postfix/smtps/smtpd.*\"}"
    stage.static_labels {
      values = {
        service_component = "smtpd",
        protocol = "smtps",
      }
    }
  }


  // =======================================================================================
  // Identify warnings

  stage.match {
    selector = "{ message =~ \"warning:.*\" }"
    stage.regex {
      expression = "warning:\\s+(?P<warning_source>[^\\[]+)(\\[(?P<source_ip>[^\\]]+)\\])?:?\\s+(?P<warning_message>.*)"
    }
    stage.static_labels {
      values = {
        log_level = "warning",
      }
    }
    stage.labels {
      values = {
        warning_source = "",
        source_ip = "",
        warning_message = "",
      }
    }
  }

  
  // .......................................................
  // Categorize warning types
  
  // Authentication failures
  stage.match {
    selector = "{log_level=\"warning\", warning_message=~\".*SASL.*authentication failed.*\" }"
    stage.regex {
      expression = "SASL (?P<auth_method>\\w+) authentication failed:.*sasl_username=(?P<attempted_user>[^\\s,]*)"
    }
    stage.static_labels {
      values = {
        warning_type = "auth_failure",
        alert_level = "medium",
      }
    }
  }
  
  // DNS resolution issues
  stage.match {
    selector = "{log_level=\"warning\", warning_message=~\".*does not resolve to address.*\"}"
    stage.regex {
      expression = "hostname (?P<hostname>[^\\s]+) does not resolve to address (?P<ip_address>[^\\s:]+)"
    }
    stage.static_labels {
      values = {
        warning_type = "dns_failure",
        alert_level = "low",
      }
    }
  }
  
  // TLS/SSL issues
  stage.match {
    selector = "{log_level=\"warning\", warning_message=~\"TLS library problem.*\"}"
    stage.regex {
      expression = "TLS library problem: (?P<ssl_error>.*)"
    }
    stage.static_labels {
      values = {
        warning_type = "tls_failure",
        alert_level = "medium",
      }
    }
  }
  

  // =======================================================================================
  // Postfix-specific Attack Patterns

  // Group common attackers by username pattern
  stage.match {
    selector = "{warning_type=\"auth_failure\", attempted_user=~\"(sales|admin|info|support)(@.*)?\"}"
    stage.static_labels {
      values = {
        attack_pattern = "common_accounts",
      }
    }
  }

  stage.match {
    selector = "{warning_type=\"auth_failure\", attempted_user=~\"[0-9]+(@.*)?\"}"
    stage.static_labels {
      values = {
        attack_pattern = "numeric_accounts",
      }
    }
  }
  



  // =======================================================================================
  // Postfix-specific log parsing
  
  // Extract SMTP transaction details  (use status messages to track outcomes.
  stage.match {
    selector = "{mail_service=\"postfix\", message=~\"status=\"}"
    stage.regex {
      expression = "(?P<client_info>[^,]*), status=(?P<status>\\S+)"
    }
  }
  
  // Track delivery statuses
  stage.match {
    selector = "{status=\"sent\"}"
    stage.static_labels {
      values = {
        delivery_result = "success",
      }
    }
  }
  
  stage.match {
    selector = "{status=\"bounced\"}"
    stage.static_labels {
      values = {
        delivery_result = "bounce",
      }
    }
  }
  
  stage.match {
    selector = "{status=\"deferred\"}"
    stage.static_labels {
      values = {
        delivery_result = "deferred",
      }
    }
  }
  
  stage.match {
    selector = "{status=\"rejected\"}"
    stage.static_labels {
      values = {
        delivery_result = "rejected",
      }
    }
  }
  
  // SMTP authentication events
  stage.match {
    selector = "{mail_service=\"postfix\", message=~\"sasl_method\"}"
    stage.regex {
      expression = "sasl_method=(?P<auth_method>\\S+), sasl_username=(?P<auth_user>\\S+)"
    }
    
    stage.static_labels {
      values = {
        event_type = "smtp_auth",
      }
    }
  }
  
  // Extract email sender/recipient
  stage.match {
    selector = "{mail_service=\"postfix\", message=~\"from=<\"}"
    stage.regex {
      expression = "from=<(?P<sender>[^>]*)>"
    }
  }
  
  stage.match {
    selector = "{mail_service=\"postfix\", message=~\"to=<\"}"
    stage.regex {
      expression = "to=<(?P<recipient>[^>]*)>"
    }
    
    stage.static_labels {
      values = {
        event_type = "mail_delivery",
      }
    }
  }
  
  // Identify message size
  stage.match {
    selector = "{mail_service=\"postfix\", message=~\"size=\"}"
    stage.regex {
      expression = "size=(?P<message_size>\\d+)"
    }
  }
  
  // SPAM/virus filter results
  stage.match {
    selector = "{mail_service=\"postfix\", message=~\"SPAM\"}"
    stage.static_labels {
      values = {
        spam_detected = "true",
      }
    }
  }
  
  stage.match {
    selector = "{mail_service=\"postfix\", message=~\"VIRUS|INFECTED\"}"
    stage.static_labels {
      values = {
        virus_detected = "true",
      }
    }
  }
  
  // =======================================================================================
  // Dovecot-specific log parsing
  
  // IMAP/POP3 logins
  stage.match {
    selector = "{mail_service=\"dovecot\", message=~\"Login:\"}"
    stage.regex {
      expression = "Login: user=<(?P<login_user>[^>]*)>"
    }
    
    stage.static_labels {
      values = {
        event_type = "mail_login",
      }
    }
  }
  
  // Failed logins
  stage.match {
    selector = "{mail_service=\"dovecot\", message=~\"auth failed\"}"
    stage.static_labels {
      values = {
        event_type = "mail_auth_failure",
      }
    }
  }
  
  // Mailbox operations
  stage.match {
    selector = "{mail_service=\"dovecot\", message=~\"[Mm]ailbox\"}"
    stage.static_labels {
      values = {
        event_type = "mailbox_operation",
      }
    }
  }
  
  // Disconnections
  stage.match {
    selector = "{mail_service=\"dovecot\", message=~\"Disconnected\"}"
    stage.static_labels {
      values = {
        event_type = "mail_disconnect",
      }
    }
  }
  
  // Security events
  stage.match {
    selector = "{message=~\"blacklist|blocked\", mail_service=\"postfix\"}"
    stage.static_labels {
      values = {
        security_event = "blocked_sender",
      }
    }
  }
  
  // Track TLS connections
  stage.match {
    selector = "{message=~\"TLS connection\"}"
    stage.static_labels {
      values = {
        tls_connection = "true",
      }
    }
  }
  
  // Special case for authentication events
  stage.match {
    selector = "{message=~\"[Aa]uth|[Ll]ogin|[Aa]uthentication|session\"}"
    stage.static_labels {
      values = {
        event_type = "authentication",
      }
    }
  }
  
  // Clean up labels to reduce cardinality
  stage.label_drop {
    values = ["pid"]
  }

  // To reduce cardinality, drop source_ip for non-tracked sources
  stage.match {
    selector = "{track_source!=\"true\"}"
    stage.label_drop {
      values = ["source_ip"]
    }
  }
}

// =======================================================================================
// Source definition to read the mail log file
loki.source.file "mail_logs" {
  targets               = local.file_match.mail_logs.targets
  forward_to            = [loki.process.mail_logs.receiver]
  legacy_positions_file = "/tmp/positions.yaml"
}


